package cn.coostack.usefulmagic.particles.style.barrage.wandimport cn.coostack.cooparticlesapi.extend.relativizeimport cn.coostack.cooparticlesapi.network.buffer.ParticleControlerDataBufferimport cn.coostack.cooparticlesapi.network.buffer.ParticleControlerDataBuffersimport cn.coostack.cooparticlesapi.network.particle.style.ParticleGroupStyleimport cn.coostack.cooparticlesapi.network.particle.style.ParticleShapeStyleimport cn.coostack.cooparticlesapi.network.particle.style.ParticleStyleProviderimport cn.coostack.cooparticlesapi.network.particle.style.SequencedParticleStyleimport cn.coostack.cooparticlesapi.particles.ControlableParticleEffectimport cn.coostack.cooparticlesapi.particles.ParticleDisplayerimport cn.coostack.cooparticlesapi.particles.control.ParticleControlerimport cn.coostack.cooparticlesapi.particles.impl.ControlableEndRodEffectimport cn.coostack.cooparticlesapi.utils.RelativeLocationimport cn.coostack.cooparticlesapi.utils.builder.PointsBuilderimport cn.coostack.cooparticlesapi.utils.helper.HelperUtilimport cn.coostack.usefulmagic.extend.isOfimport cn.coostack.usefulmagic.items.UsefulMagicItemsimport cn.coostack.usefulmagic.utils.ParticleOptionimport net.minecraft.client.particle.ParticleRenderTypeimport net.minecraft.world.entity.player.Playerimport net.minecraft.world.phys.Vec3import java.util.SortedMapimport java.util.UUIDimport kotlin.math.PIimport kotlin.math.absimport kotlin.math.minclass HealthReviveStyle(val bindPlayerUUID: UUID, uuid: UUID) : SequencedParticleStyle(64.0, uuid) {    class Provider : ParticleStyleProvider {        override fun createStyle(            uuid: UUID,            args: Map<String, ParticleControlerDataBuffer<*>>        ): ParticleGroupStyle {            val bind = args["bind_player"]!!.loadedValue as UUID            return HealthReviveStyle(bind, uuid)                .also { it.readPacketArgs(args) }        }    }    val maxAage = 160    val particleCounts: Int        get() = ParticleOption.getParticleCounts()    val helper = HelperUtil.scaleStyle(1.0 / 60, 1.0, 20)    /**     * 维护一个变量用于控制子节点的生成情况     *     * 此变量同时会影响到本类的相对位置情况     */    var age = 0    /**     * 维护一个变量用于统计状态     * 1 -> 正在播放     * 2 -> 停止播放 (设置为2时 设置age = 140 (160 -20))     */    var displayStatus = 1    override fun getParticlesCount(): Int {        return 14    }    init {        helper.loadControler(this)    }    override fun getCurrentFramesSequenced(): SortedMap<SortedStyleData, RelativeLocation> {        val res = sortedMapOf<SortedStyleData, RelativeLocation>()        // 玩家脚下        val foot = RelativeLocation(0.0, 0.01, 0.0)        val header = RelativeLocation(0.0, 12.0, 0.0)        val h3 = RelativeLocation(0.0, 8.0, 0.0)        val h4 = RelativeLocation(0.0, 4.0, 0.0)        val h5 = RelativeLocation(0.0, 2.0, 0.0)        val reverseFunction: (ParticleShapeStyle) -> Unit = {            it.addPreTickAction {                if (it.scaleReversed && it.scaleHelper!!.isZero()) {                    it.remove()                    return@addPreTickAction                }                if (displayStatus != 2) {                    return@addPreTickAction                }                if (!it.scaleReversed) {                    it.scaleReversed(false)                }            }        }        var order = 0        var orderAge = 0        fun ParticleShapeStyle.withShapeStyle(order: Int, rotate: Double): ParticleShapeStyle {            toggleBeforeDisplay {                scaleHelper!!.doScaleTo(age - nextStep * order)            }                .toggleOnDisplay {                    addPreTickAction {                        rotateParticlesAsAxis(rotate)                    }                    reverseFunction(this)                }            return this        }        res[SortedStyleData(            {                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(2.5, 30 * particleCounts)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, false)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }.loadScaleHelper(1 / 20.0, 1.0, 5)                        .withShapeStyle(orderAge++, -PI / 32)                )            }, order++        )] = foot        res[SortedStyleData(            {                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(4.0, 60 * particleCounts)                                .addCircle(4.5, 80 * particleCounts)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, false)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }.loadScaleHelper(1 / 20.0, 1.0, 5)                        .withShapeStyle(orderAge++, -PI / 32)                )            }, order++        )] = foot        res[            SortedStyleData(                {                    ParticleDisplayer.withStyle(                        ParticleShapeStyle(it)                            .appendBuilder(                                PointsBuilder()                                    .addPolygonInCircle(4, 20 * particleCounts, 8.0)                                    .rotateAsAxis(PI / 4)                                    .addPolygonInCircle(4, 20 * particleCounts, 8.0)                            ) {                                withSingleStyle({                                    ControlableEndRodEffect(it, false)                                }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                            }                            .loadScaleHelper(1 / 20.0, 1.0, 5)                            .withShapeStyle(orderAge++, PI / 32)                    )                }, order++            )        ] = foot        res[            SortedStyleData(                {                    ParticleDisplayer.withStyle(                        ParticleShapeStyle(it)                            .appendBuilder(                                PointsBuilder()                                    .addWith {                                        val res = ArrayList<RelativeLocation>()                                        getPolygonInCircleVertices(3, 2.5).forEach { origin ->                                            res.addAll(                                                PointsBuilder()                                                    .addCircle(1.5, 30 * particleCounts)                                                    .addPolygonInCircle(3, 10 * particleCounts, 1.5)                                                    .rotateAsAxis(PI / 3)                                                    .addPolygonInCircle(3, 10 * particleCounts, 1.5)                                                    .create()                                                    .onEach { s -> s.add(origin).also { it.y += 0.2 } })                                        }                                        res                                    }                                    .addPolygonInCircle(3, 10 * particleCounts, 2.5)                                    .rotateAsAxis(PI / 3)                                    .addPolygonInCircle(3, 10 * particleCounts, 2.5)                            ) {                                withSingleStyle({                                    ControlableEndRodEffect(it, false)                                }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                            }                            .loadScaleHelper(1 / 20.0, 1.0, 5)                            .withShapeStyle(orderAge++, -PI / 32)                    )                }, order++            )        ] = foot        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(8.0, 120 * particleCounts)                                .pointsOnEach { it.y += 1 }                                .addCircle(7.5, 120 * particleCounts)                                .addWith {                                    connectLines(                                        PointsBuilder.of(                                            getCircleXZ(7.5, 16)                                        ).rotateAsAxis(-PI / 32).create(),                                        getCircleXZ(8.0, 32).onEach { it.y += 1 }, 4 * particleCounts                                    ).flatten()                                }                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 15)                        .withShapeStyle(orderAge++, -PI / 16)                )            }, order++)        ] = h5        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(12.0, 180 * particleCounts)                                .pointsOnEach { it.y += 1 }                                .addCircle(12.0, 180 * particleCounts)                                .addWith {                                    connectLines(                                        PointsBuilder.of(                                            getCircleXZ(12.0, 64)                                        ).create(),                                        getCircleXZ(12.0, 64).onEach { it.y += 1 }, 3 * particleCounts                                    ).flatten()                                }                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 15)                        .withShapeStyle(orderAge++, PI / 16)                )            }, order++)        ] = h4        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(5.0, 60 * particleCounts)                                .pointsOnEach { it.y += 1 }                                .addCircle(4.5, 60 * particleCounts)                                .addWith {                                    connectLines(                                        PointsBuilder.of(                                            getCircleXZ(4.5, 16)                                        ).create(),                                        getCircleXZ(5.0, 16).onEach { it.y += 1 }, 3 * particleCounts                                    ).flatten()                                }                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 15)                        .withShapeStyle(orderAge++, PI / 32)                )            }, order++)        ] = h3        fun ParticleShapeStyle.withShapeStyleCircle(order: Int, rotate: Double): ParticleShapeStyle {            toggleBeforeDisplay {                scaleHelper!!.doScaleTo(age - nextStep * order)                it.forEach {                    val rl = it.value                    if (rl.y >= 0 || rl.x != 0.0 || rl.z != 0.0) return@forEach                    val han = it.key.particleHandler                    val abs = abs(rl.y)                    it.key.withParticleHandler {                        han(this)                        particleAlpha = min(1f, 10f / abs.toFloat())                    }                }            }                .toggleOnDisplay {                    addPreTickAction {                        this.rotateParticlesAsAxis(rotate)                        val player = getPlayer() ?: return@addPreTickAction                        this.rotateParticlesToPoint(RelativeLocation.of(pos.relativize(player.eyePosition)))                    }                    reverseFunction(this)                }            return this        }        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(2.0, 45 * particleCounts)                                .pointsOnEach { it.y -= 1 }                                .addCircle(1.5, 45 * particleCounts)                                .pointsOnEach { it.y -= 1 }                                .addCircle(3.0, 60 * particleCounts)                                .addLine(RelativeLocation(0, -40, 0), RelativeLocation(0, 10, 0), 60 * particleCounts)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 20)                        .withShapeStyleCircle(orderAge++, PI / 64)                )            }, order++)        ] = h3.clone().add(RelativeLocation(12, 0, 0))        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(2.0, 45 * particleCounts)                                .pointsOnEach { it.y -= 1 }                                .addCircle(1.5, 45 * particleCounts)                                .pointsOnEach { it.y -= 1 }                                .addCircle(3.0, 60 * particleCounts)                                .addLine(RelativeLocation(0, -40, 0), RelativeLocation(0, 10, 0), 60 * particleCounts)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 20)                        .withShapeStyleCircle(orderAge++, PI / 64)                )            }, order++)        ] = h3.clone().add(RelativeLocation(-12, 0, 0))        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(2.0, 45 * particleCounts)                                .pointsOnEach { it.y -= 1 }                                .addCircle(1.5, 45 * particleCounts)                                .pointsOnEach { it.y -= 1 }                                .addCircle(3.0, 60 * particleCounts)                                .addLine(RelativeLocation(0, -40, 0), RelativeLocation(0, 10, 0), 60 * particleCounts)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 20)                        .withShapeStyleCircle(orderAge++, PI / 64)                )            }, order++)        ] = h3.clone().add(RelativeLocation(0, 0, -12))        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(2.0, 45 * particleCounts)                                .pointsOnEach { it.y -= 1 }                                .addCircle(1.5, 45 * particleCounts)                                .pointsOnEach { it.y -= 1 }                                .addCircle(3.0, 60 * particleCounts)                                .addLine(RelativeLocation(0, -40, 0), RelativeLocation(0, 10, 0), 60 * particleCounts)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 20)                        .withShapeStyleCircle(orderAge++, PI / 64)                )            }, order++)        ] = h3.clone().add(RelativeLocation(0, 0, 12))        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCycloidGraphic(2.0, 1.0, -1, 2, 240 * particleCounts, 3.0)                                .rotateAsAxis(PI / 4)                                .addCycloidGraphic(2.0, 1.0, -1, 2, 240 * particleCounts, 3.0)                                .rotateAsAxis(PI / 4)                                .addCycloidGraphic(2.0, 1.0, -1, 2, 240 * particleCounts, 3.0)                                .rotateAsAxis(PI / 4)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 15)                        .withShapeStyle(orderAge++, -PI / 64)                )            }, order++)        ] = header        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addCircle(9.0, 120 * particleCounts)                                .addCircle(8.5, 120 * particleCounts)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 20)                        .withShapeStyle(orderAge++, -PI / 64)                )            }, order++)        ] = header        res[            SortedStyleData({                ParticleDisplayer.withStyle(                    ParticleShapeStyle(it)                        .appendBuilder(                            PointsBuilder()                                .addPolygonInCircle(5, 30 * particleCounts, 12.0)                                .addPolygonInCircle(5, 30 * particleCounts, 14.0)                        ) {                            withSingleStyle({                                ControlableEndRodEffect(it, true)                            }, 0.2f, 1f, Vec3(146.0, 255.0, 169.0))                        }                        .loadScaleHelper(1 / 20.0, 1.0, 20)                        .withShapeStyle(orderAge++, PI / 16)                )            }, order++)        ] = header        return res    }    private fun withSingleStyle(        effect: (UUID) -> ControlableParticleEffect,        size: Float,        alpha: Float,        color: Vec3,        textureSheet: ParticleRenderType = ParticleRenderType.PARTICLE_SHEET_LIT,        anotherInvoker: (ParticleControler) -> Unit = {}    ): StyleData {        return StyleData {            ParticleDisplayer.withSingle(effect.invoke(it))        }.withParticleHandler {            this.colorOfRGB(color.x.toInt(), color.y.toInt(), color.z.toInt())            this.size = size            this.particleAlpha = alpha            this.textureSheet = textureSheet        }.withParticleControlerHandler {            anotherInvoker(this)            controlAction {                if (!faceToCamera) {                    rotateParticleTo(RelativeLocation.yAxis())                }            }        }    }    private val nextStep = 5    private var index = 0    override fun onDisplay() {        if (index != 0) {            addMultiple(index + 1)        }        addPreTickAction {            val player = getPlayer() ?: return@addPreTickAction            helper.doScale()            if (age++ % nextStep == 0 && displayStatus == 1) {                if (index++ < getParticlesCount()) {                    if (!client) {                        addSingle()                    }                }            }            rotateParticlesAsAxis(PI / 32)            teleportTo(player.position())        }        addPreTickAction {            if (client) {                return@addPreTickAction            }            if (age >= maxAage) {                remove()            }            val player = getPlayer() ?: let {                remove()                return@addPreTickAction            }            // 判断玩家手中的物品            if (displayStatus == 1 && !player.useItem.isOf(UsefulMagicItems.HEALTH_REVIVE_WAND)) {                setStatus(2)            }        }    }    private fun setStatus(s: Int) {        if (s == 2) {            age = maxAage - 20        }        displayStatus = s        if (!client) {            change(                {}, mapOf(                    "display_status" to ParticleControlerDataBuffers.int(displayStatus)                )            )        }    }    override fun writePacketArgsSequenced(): Map<String, ParticleControlerDataBuffer<*>> {        return mapOf(            "age" to ParticleControlerDataBuffers.int(age),            "bind_player" to ParticleControlerDataBuffers.uuid(bindPlayerUUID),            "index" to ParticleControlerDataBuffers.int(index),            "display_status" to ParticleControlerDataBuffers.int(displayStatus)        )    }    override fun readPacketArgsSequenced(args: Map<String, ParticleControlerDataBuffer<*>>) {        if (args.containsKey("age")) {            age = args["age"]!!.loadedValue as Int        }        if (args.containsKey("scale")) {            helper.toggleScale(args["scale"]!!.loadedValue as Double)        }        args["index"]?.let {            index = it.loadedValue as Int        }        args["display_status"]?.let {            setStatus(it.loadedValue as Int)        }    }    private fun getPlayer(): Player? = world?.getPlayerByUUID(bindPlayerUUID)}